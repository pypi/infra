#!/bin/bash

command -v jq > /dev/null 2>&1 || (echo "you must have 'jq' installed" && exit 1)
command -v consul > /dev/null 2>&1 || (echo "you must have 'consul' installed" && exit 1)

if [ -z "$CONSUL_MANAGEMENT_TOKEN" ]; then
  response=$(kubectl exec -it --tty -n vault consul-0 -- curl \
               --silent --show-error --fail \
               --request PUT \
               http://127.0.0.1:8500/v1/acl/bootstrap)
  if [ $? -ne 0 ]; then
    echo "bootstrapping ACLs failed, check networking, or perhaps they have already been bootstrapped"
    echo "rerun setting Management Token in CONSUL_MANAGEMENT_TOKEN"
    echo $response
    exit 1
  fi
  
  bootstrap_token=$(echo $response | jq -r '.ID')
  echo "************************* Secure this! *************************"
  echo "Consul ACL Bootstrap Token: $bootstrap_token"
  echo "************************* Secure this! *************************"
else
  bootstrap_token=$CONSUL_MANAGEMENT_TOKEN
  echo "Using Management Token from env CONSUL_MANAGEMENT_TOKEN"
fi

echo "writing anonymous ACL"
ANON_POLICY=$(python3 -c "import json; policy_doc = open('policies/anonymous.hcl', 'rU').read().rstrip(); print(json.dumps(policy_doc))")
response=$(kubectl exec -it --tty -n vault consul-0 -- curl \
             --silent --show-error --fail \
             --header "X-Consul-Token: $bootstrap_token" \
             --request PUT \
             --data '{"ID": "anonymous", "Rules": '"$ANON_POLICY"'}' \
             http://127.0.0.1:8500/v1/acl/update)
if [ $? -ne 0 ]; then
  echo "writing anonymous ACL failed, check networking"
  echo $response
  exit 1
fi
echo "wrote anonymous ACL"

keyring=$(kubectl exec -it --tty -n vault consul-0 -- curl \
            --silent --show-error --fail \
            --header "X-Consul-Token: $bootstrap_token" \
            http://127.0.0.1:8500/v1/operator/keyring)

echo $keyring | jq -r '.[].Keys|keys | .[]' | sort | uniq | grep "aaaaaaaaaaaaaaaaaaaaaQ==" > /dev/null 2>&1
if [ $? -eq 0 ]; then
  echo "bootstrapping gossip/encryption key found, performing rotation"
  new_encrypt_key=$(consul keygen)
  kubectl exec -it --tty -n vault consul-0 -- curl \
    --silent --show-error --fail \
    --header "X-Consul-Token: $bootstrap_token" \
    --request POST \
    --data '{"Key": "'"$new_encrypt_key"'"}' \
    http://127.0.0.1:8500/v1/operator/keyring
  echo "new key submitted to cluster, allowing to settle..."
  sleep 5
  kubectl exec -it --tty -n vault consul-0 -- curl \
    --silent --show-error --fail \
    --header "X-Consul-Token: $bootstrap_token" \
    --request PUT \
    --data '{"Key": "'"$new_encrypt_key"'"}' \
    http://127.0.0.1:8500/v1/operator/keyring
  echo "new key promoted to primary, allowing to settle..."
  sleep 5
  kubectl patch secret -n vault consul-gossip-key -p '{"data": {"key": "'"$(printf $new_encrypt_key | base64)"'"}}'
  echo "Stored consul-gossip-key"
  kubectl exec -it --tty -n vault consul-0 -- curl \
    --silent --show-error --fail \
    --header "X-Consul-Token: $bootstrap_token" \
    --request DELETE \
    --data '{"Key": "aaaaaaaaaaaaaaaaaaaaaQ=="}' \
    http://127.0.0.1:8500/v1/operator/keyring
  echo "bootstrapping gossip key removed!"
fi

stored_agent_token=$(kubectl -n vault get secret consul-agent-token -o json | jq -r '.data.token' | base64 --decode)

if [ "$stored_agent_token" = "null" ]; then
  echo "No Agent Token found, creating a new one"
  AGENT_POLICY=$(python3 -c "import json; policy_doc = open('policies/agent.hcl', 'rU').read().rstrip(); print(json.dumps(policy_doc))")
  response=$(
    kubectl exec -it --tty -n vault consul-0 -- curl \
    --silent --show-error --fail \
    --request PUT \
    --header "X-Consul-Token: $bootstrap_token" \
    --data '{"Name": "Agent Token", "Type": "client", "Rules": '"$AGENT_POLICY"'}' \
    localhost:8500/v1/acl/create
  )
  if [ $? -ne 0 ]; then
    echo "Creating Initial Agent Token failed, check networking"
    echo $response
    exit 1
  fi
  agent_token=$(echo $response | jq -r '.ID')
  echo "Captured newly created Agent Token, storing in secret consul-agent-token"
  kubectl patch secret -n vault consul-agent-token -p '{"data": {"token": "'"$(printf $agent_token | base64)"'"}}'
  echo "Stored consul-agent-token"
else
  agent_token=$stored_agent_token
fi

echo "Applying Agent Token to initial cluster"
for i in 0 1 2; do
  kubectl exec -it --tty -n vault consul-$i -- curl \
      --silent --show-error --fail \
      --request PUT \
      --header "X-Consul-Token: $bootstrap_token" \
      --data '{"Token": "'"$agent_token"'"}' \
      http://127.0.0.1:8500/v1/agent/token/acl_agent_token
done
