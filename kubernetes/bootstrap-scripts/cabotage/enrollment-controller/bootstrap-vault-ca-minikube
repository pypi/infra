#!/bin/bash

command -v jq > /dev/null 2>&1 || { echo "you must have 'jq' installed"; exit 1; }
command -v $GOPATH/bin/cfssl > /dev/null 2>&1 || { echo "you must have 'cfssl' installed _from source_ see https://github.com/cloudflare/cfssl/issues/657#issuecomment-288015562"; exit 1; }

FIRST_POD=($(kubectl get pod -n vault -l 'app=vault-server' -o json | jq -r '.items[0] | "\(.metadata.name) \(.status.podIP)"'))
CA_CERT=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt

POD_NAME=${FIRST_POD[0]}
POD_IP=${FIRST_POD[1]}

if [ -z $VAULT_TOKEN ]; then
  echo "You must supply VAULT_TOKEN env var with root privileges"
fi

kubectl exec -n vault $POD_NAME -c vault-server -- sh -c "VAULT_TOKEN="$VAULT_TOKEN" vault mounts" | grep ^cabotage-ca\/ > /dev/null 2>&1
if [ $? -eq 0 ]; then
  echo "Internal CA already mounted"
else
  echo "Mounting Vault PKI backend for Internal CA"
  kubectl exec -n vault $POD_NAME -c vault-server -- \
    sh -c "VAULT_TOKEN="$VAULT_TOKEN" vault mount \
    -description='Kubernetes Internal Intermediate CA' \
    -path=cabotage-ca \
    pki"
fi

URLS='
{
    "issuing_certificates": "https://vault-server.vault.svc.cluster.local/v1/cabotage-ca/ca",
    "crl_distribution_points": "https://vault-server.vault.svc.cluster.local/v1/cabotage-ca/crl"
}
'

DATA='
{
    "common_name": "Kubernetes Internal Intermediate CA",
    "alt_names": "infrastructure-staff@python.org",
    "ttl": "43800h",
    "key_type": "rsa",
    "key_bits": 4096,
    "exclude_cn_from_sans": true
}
'

kubectl exec -n vault $POD_NAME -c vault-server -- sh -c "VAULT_TOKEN="$VAULT_TOKEN" vault read cabotage-ca/cert/ca" > /dev/null 2>&1
if [ $? -eq 0 ]; then
    echo "Internal CA already signed"
else
    echo "configuring Internal CA..."
    kubectl exec -n vault $POD_NAME -c vault-server -- \
      sh -c "VAULT_TOKEN="$VAULT_TOKEN" vault write cabotage-ca/config/urls \
        issuing_certificates='https://vault-server.vault.svc.cluster.local/v1/cabotage-ca/ca' \
        crl_distribution_points='https://vault-server.vault.svc.cluster.local/v1/cabotage-ca/crl'"
    echo "generating Internal CA..."
    kubectl exec -n vault $POD_NAME -c vault-server -- \
      sh -c "VAULT_TOKEN="$VAULT_TOKEN" vault write -format=json cabotage-ca/intermediate/generate/internal \
        common_name='Kubernetes Internal Intermediate CA' \
        alt_names='infrastructure-staff@python.org' \
        ttl=43800h \
        key_type=rsa \
        key_bits=4096 \
        exclude_cn_from_sans=true" | jq -r '.data.csr' > cabotage.csr

    cfssl_config=$(mktemp)
    cat <<EOF > $cfssl_config
    {
      "signing": {
        "profiles": {
          "intermediate": {
            "expiry": "43800h",
            "usages": [
              "digital signature",
              "signing",
              "key encipherment",
              "cert sign",
              "crl sign"
            ],
            "ca_constraint": {
              "is_ca": true,
              "max_path_len": 0,
              "max_path_len_zero": true
            }
          }
        }
      }
    }
EOF

    echo "signing Internal CA with minikube CA..."
    CERT=$($GOPATH/bin/cfssl sign -config $cfssl_config -ca ~/.minikube/ca.crt -ca-key ~/.minikube/ca.key -profile intermediate cabotage.csr | jq '.cert')
    echo "providing signed Internal CA Certificate back to Vault PKI Backend"
    kubectl exec -n vault $POD_NAME -c consul -- \
      curl --silent --show-error --fail \
      --cacert $CA_CERT \
      --header "X-Vault-Token: $VAULT_TOKEN" \
      https://$POD_IP:8200/v1/cabotage-ca/intermediate/set-signed \
      --data '{"certificate": '"$CERT"'}'
fi

echo "Summary of Internal Certificate Authority"
echo ""
kubectl exec -n vault $POD_NAME -c vault-server -- vault read -format=json cabotage-ca/cert/ca | jq -r '.data.certificate' | openssl x509 -noout -text -certopt no_header,no_version,no_serial,no_signame,no_pubkey,no_sigdump,no_aux
echo ""
