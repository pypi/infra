#!/bin/bash

command -v jq > /dev/null 2>&1 || (echo "you must have 'jq' installed" && exit 1)

if [ -z "$CONSUL_MANAGEMENT_TOKEN" ]; then
  echo "rerun setting a Consul Management Token in CONSUL_MANAGEMENT_TOKEN"
  exit 1
else
  bootstrap_token=$CONSUL_MANAGEMENT_TOKEN
  echo "Using Management Token from env CONSUL_MANAGEMENT_TOKEN"
fi

secret_check=$(kubectl -n vault get secret vault-consul-token 2>&1)
if [[ $secret_check == *'Error from server (NotFound): secrets "vault-consul-token" not found'* ]]; then
  echo "creating bootstrapping secret (null)"
  kubectl create -n vault secret generic vault-consul-token --from-literal=token=null
else
  echo "found vault-consul-token!"
fi

stored_vault_token=$(kubectl -n vault get secret vault-consul-token -o json | jq -r '.data.token' | openssl base64 -d)

if [ "$stored_vault_token" = "null" ]; then
  echo "No Vault Server Consul Token found, creating a new one"
  AGENT_POLICY=$(python3 -c "import json; policy_doc = open('consul-policies/vault.hcl', 'rU').read().rstrip(); print(json.dumps(policy_doc))")
  response=$(kubectl exec -it --tty -n vault consul-0 -- curl \
    --silent --show-error --fail \
    --request PUT \
    --header "X-Consul-Token: $bootstrap_token" \
    --data '{"Name": "Vault Server Token", "Type": "client", "Rules": '"$AGENT_POLICY"'}' \
    localhost:8500/v1/acl/create
  )
  if [ $? -ne 0 ]; then
    echo "Creating Vault Server Consul Token failed, check networking"
    echo $response
    exit 1
  fi
  token=$(echo $response | jq -r '.ID')
  echo "Captured newly created Vault Server Consul Token, storing in secret vault-consul-token"
  kubectl patch secret -n vault vault-consul-token -p '{"data": {"token": "'"$(printf $token | openssl base64)"'"}}'
  echo "Stored vault-consul-token"
else
  echo "vault-consul-token already bootstrapped!"
fi
