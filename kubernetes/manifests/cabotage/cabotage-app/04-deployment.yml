apiVersion: apps/v1beta1
kind: Deployment
metadata:
  namespace: cabotage
  name: cabotage-app
  labels:
    app: cabotage-app
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: cabotage-app
    spec:
      serviceAccountName: cabotage-app
      initContainers:
        - name: cabotage-enroller
          image: cabotage/sidecar:v1.0.0a1
          imagePullPolicy: Always
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          args:
            - "kube_login"
            - "--namespace=$(NAMESPACE)"
            - "--vault-auth-kubernetes-role=cabotage-cabotage-app"
            - "--fetch-consul-token"
            - "--vault-consul-role=cabotage-cabotage-app"
            - "--fetch-cert"
            - "--vault-pki-role=cabotage-cabotage-app"
            - "--pod-name=$(POD_NAME)"
            - "--pod-ip=$(POD_IP)"
            - "--service-names=cabotage-app"
          volumeMounts:
            - name: vault-secrets
              mountPath: /var/run/secrets/vault
      containers:
        - name: cabotage-sidecar
          image: cabotage/sidecar:v1.0.0a1
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          args:
            - "maintain"
          volumeMounts:
            - name: vault-secrets
              mountPath: /var/run/secrets/vault
        - name: cabotage-sidecar-tls
          image: cabotage/sidecar:v1.0.0a1
          imagePullPolicy: Always
          command: ["./ghostunnel"]
          args:
            - "server"
            - "--keystore=/var/run/secrets/vault/combined.pem"
            - "--cacert=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
            - "--timed-reload=300s"
            - "--shutdown-timeout=10s"
            - "--connect-timeout=10s"
            - "--disable-authentication"
            - "--target=unix:///var/run/cabotage/cabotage.sock"
            - "--listen=0.0.0.0:8443"
          volumeMounts:
            - name: vault-secrets
              mountPath: /var/run/secrets/vault
            - name: cabotage-sock
              mountPath: /var/run/cabotage
          ports:
            - containerPort: 8443
              name: https
          livenessProbe:
            httpGet:
              path: /
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 5
          readinessProbe:
            httpGet:
              path: /
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 5
        - name: redis
          image: redis:3.2
        - name: cabotage-app
          image: cabotage/cabotage-app:v1.0.0a1
          imagePullPolicy: Always
          command: ["pipenv"]
          args:
            - "run"
            - "gunicorn"
            - "-c"
            - "gunicorn.conf"
            - "-b"
            - "unix:/var/run/cabotage/cabotage.sock"
            - "-w"
            - "4"
            - "cabotage.server.wsgi:app"
          envFrom:
            - configMapRef:
                name: cabotage-config
          volumeMounts:
            - name: vault-secrets
              mountPath: /var/run/secrets/vault
            - name: cabotage-sock
              mountPath: /var/run/cabotage
          resources:
            limits:
              cpu: 400m
              memory: 600Mi
            requests:
              cpu: 200m
              memory: 300Mi
        - name: cabotage-app-worker
          image: cabotage/cabotage-app:v1.0.0a1
          imagePullPolicy: Always
          command: ["pipenv"]
          args:
            - "run"
            - "celery"
            - "-A"
            - "cabotage.celery.worker.celery"
            - "worker"
            - "-E"
          envFrom:
            - configMapRef:
                name: cabotage-config
          volumeMounts:
            - name: vault-secrets
              mountPath: /var/run/secrets/vault
          resources:
            limits:
              cpu: 400m
              memory: 600Mi
            requests:
              cpu: 200m
              memory: 300Mi
      volumes:
        - name: vault-secrets
          emptyDir:
            medium: "Memory"
            sizeLimit: "1M"
        - name: cabotage-sock
          emptyDir:
            medium: "Memory"
            sizeLimit: "1M"
