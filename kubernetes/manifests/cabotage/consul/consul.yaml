---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: consul
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: request-certificate
subjects:
- kind: ServiceAccount
  namespace: vault
  name: consul
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: consul
  namespace: vault
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: consul
  namespace: vault
data:
  server.json: |
    {
      "ca_file": "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt",
      "cert_file": "/etc/tls/cert.pem",
      "key_file": "/etc/tls/key.pem",
      "acl_datacenter": "us-east1",
      "acl_default_policy": "deny",
      "acl_enable_key_list_policy": true,
      "verify_incoming": false,
      "verify_outgoing": true,
      "verify_server_hostname": true,
      "ports": {
        "https": 8443
      },
      "autopilot": {
        "cleanup_dead_servers": true,
        "last_contact_threshold": "300ms",
        "max_trailing_logs": 250,
        "server_stabilization_time": "10s"
      }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: consul-scripts
  namespace: vault
data:
  write-secrets.sh: |
    if [ "$CONSUL_ACL_AGENT_TOKEN" != "null" ]; then
      cat > /etc/consul/secrets/acl_agent_token.json <<EOF
    {"acl_agent_token": "$CONSUL_ACL_AGENT_TOKEN"}
    EOF
      echo "Wrote /etc/consul/secrets/acl_agent_token.json"
    fi
    cat > /etc/consul/secrets/encrypt.json <<EOF
    {"encrypt": "$GOSSIP_ENCRYPTION_KEY"}
    EOF
    echo "Wrote /etc/consul/secrets/encrypt.json"
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: consul
  namespace: vault
spec:
  serviceName: consul-internal
  replicas: 3
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: consul-internal
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - consul-internal
              topologyKey: failure-domain.beta.kubernetes.io/zone
      serviceAccountName: consul
      initContainers:
        - name: certificate-requestor
          image: gcr.io/the-psf/certificate-requestor:v1.0.0a1
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          args:
            - "--additional-dnsnames=server.us-east1.cluster.local"
            - "--cert-dir=/etc/tls"
            - "--namespace=$(NAMESPACE)"
            - "--pod-ip=$(POD_IP)"
            - "--pod-name=$(POD_NAME)"
            - "--service-names=consul,consul-internal"
          volumeMounts:
            - name: tls
              mountPath: /etc/tls
        - name: consul-secret-writer
          image: alpine:3.7
          env:
            - name: CONSUL_ACL_AGENT_TOKEN
              valueFrom:
                secretKeyRef:
                  name: consul-agent-token
                  key: token
            - name: GOSSIP_ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: consul-gossip-key
                  key: key
          command: ['/bin/sh']
          args: ['/opt/scripts/write-secrets.sh']
          volumeMounts:
            - name: consul-secrets
              mountPath: /etc/consul/secrets
            - name: consul-scripts
              mountPath: /opt/scripts
      containers:
        - name: consul
          image: consul:1.0.1
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: INITIAL_CLUSTER_SIZE
              value: "3"  # This should not change once consul has been created.
          args:
            - "agent"
            - "-advertise=$(POD_IP)"
            - "-bind=0.0.0.0"
            - "-bootstrap-expect=$(INITIAL_CLUSTER_SIZE)"
            - "-retry-join=consul-0.consul-internal.$(NAMESPACE).svc.cluster.local"
            - "-retry-join=consul-1.consul-internal.$(NAMESPACE).svc.cluster.local"
            - "-retry-join=consul-2.consul-internal.$(NAMESPACE).svc.cluster.local"
            - "-client=0.0.0.0"
            - "-domain=cluster.local"
            - "-datacenter=us-east1"
            - "-config-file=/etc/consul/config/server.json"
            - "-config-dir=/etc/consul/secrets/"
            - "-server"
            - "-ui"
          ports:
            - containerPort: 8300
              name: server-rpc
            - containerPort: 8301
              name: serf-lan
            - containerPort: 8302
              name: serf-wan
            - containerPort: 8500
              name: http-api
            - containerPort: 8600
              name: dns-api
          volumeMounts:
            - name: tls
              mountPath: /etc/tls
            - name: consul-config
              mountPath: /etc/consul/config
            - name: consul-secrets
              mountPath: /etc/consul/secrets
            - name: consul-data
              mountPath: /consul/data
          readinessProbe:
            httpGet:
              path: /v1/operator/raft/configuration
              port: 8500
            initialDelaySeconds: 10
            periodSeconds: 30
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/sh
                - -c
                - consul leave
      volumes:
        - name: tls
          emptyDir:
            medium: "Memory"
            sizeLimit: "1M"
        - name: consul-secrets
          emptyDir:
            medium: "Memory"
            sizeLimit: "1M"
        - name: consul-config
          configMap:
            name: consul
        - name: consul-scripts
          configMap:
            name: consul-scripts
  volumeClaimTemplates:
    - metadata:
        name: consul-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 10Gi
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: consul-internal
  namespace: vault
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: consul-internal
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  labels:
    app: consul-internal
  name: consul-internal
  namespace: vault
spec:
  clusterIP: None
  ports:
  - name: http
    port: 8500
    protocol: TCP
    targetPort: 8500
  - name: https
    port: 8443
    protocol: TCP
    targetPort: 8443
  - name: rpc
    port: 8400
    protocol: TCP
    targetPort: 8400
  - name: serflan-tcp
    port: 8301
    protocol: TCP
    targetPort: 8301
  - name: serflan-udp
    port: 8301
    protocol: UDP
    targetPort: 8301
  - name: serfwan-tcp
    port: 8302
    protocol: TCP
    targetPort: 8302
  - name: serfwan-udp
    port: 8302
    protocol: UDP
    targetPort: 8302
  - name: server
    port: 8300
    protocol: TCP
    targetPort: 8300
  - name: consuldns
    port: 8600
    protocol: TCP
    targetPort: 8600
  selector:
    app: consul-internal
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  labels:
    app: consul-internal
  name: consul
  namespace: vault
spec:
  ports:
  - name:
    port: 443
    protocol: TCP
    targetPort: 8443
  selector:
    app: consul-internal
  type: ClusterIP
